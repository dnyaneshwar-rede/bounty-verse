generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?
  image         String?
  email         String?         @unique
  password      String?
  bio           String?
  emailVerified DateTime?
  avatar        String?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  bounties      Bounty[]
  submissions   Submission[]
  achievements  Achievement[]
  skills      UserSkill[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique 
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Bounty {
  id          String       @id @default(cuid())
  title       String
  description String
  reward      Float
  status      BountyStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
}

model Submission {
  id        String           @id @default(cuid())
  content   String
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  bountyId  String
  bounty    Bounty           @relation(fields: [bountyId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}


model Skill {
  id          String     @id @default(cuid())
  name        String     @unique
  category    SkillCategory
  users       UserSkill[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserSkill {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  proficiency Proficiency @default(INTERMEDIATE)
  visibility Visibility   @default(PUBLIC)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, skillId])
}

enum SkillCategory {
  FRONTEND
  BACKEND
  MOBILE
  BLOCKCHAIN
  COMMUNITY
  CONTENT
  OTHER
}

enum Proficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Visibility {
  PUBLIC
  PRIVATE
}