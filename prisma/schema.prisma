datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  bounties      Bounty[]
  submissions   Submission[]
  achievements  Achievement[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bounty {
  id          String       @id @default(cuid())
  title       String
  description String
  reward      Float
  status      BountyStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
}

model Submission {
  id        String           @id @default(cuid())
  content   String
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  bountyId  String
  bounty    Bounty           @relation(fields: [bountyId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}